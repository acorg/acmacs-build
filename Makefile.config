# -*- Makefile -*-
# ======================================================================

# $(foreach v, $(.VARIABLES), $(info $(v) = $($(v))))

ifeq ($(ACMACSD_ROOT),)
  $(error undefined env var ACMACSD_ROOT)
endif

ifneq (,$(findstring darwin,$(MAKE_HOST)))
  PLATFORM=darwin
else ifeq (x86_64-pc-linux-gnu,$(MAKE_HOST))
  PLATFORM=linux
else ifeq (,$(MAKE_HOST))
  UNAME = $(shell uname)
  ifeq ($(UNAME),Darwin)
    PLATFORM=darwin
  else ifeq ($(UNAME),Linux)
    PLATFORM=linux
  else
    $(error Unsupported platform $(UNAME))
  endif
else
  $(error Unsupported platform $(MAKE_HOST))
endif

# ----------------------------------------------------------------------

MAKEFLAGS = -w

ifeq ($(MAKECMDGOALS),clean)
  VERBOSE = 1
endif

ifndef VERBOSE
.SILENT:
endif

# ----------------------------------------------------------------------

capable_2a = $(shell if echo "" | $(1) -std=c++2a -x c++ -c -o /dev/null - >/dev/null 2>&1; then echo 1; fi)

# ----------------------------------------------------------------------
# clang
# ----------------------------------------------------------------------

ifeq ($(PLATFORM),darwin)
  CLANG_ROOT = /usr/local/opt/llvm
  CLANG = $(CLANG_ROOT)/bin/clang++
  CLANG_LIB_DIR = $(CLANG_ROOT)/lib
  CLANG_LIBS = -L$(CLANG_LIB_DIR) -lc++fs
endif

ifeq ($(PLATFORM),linux)
  CLANG = clang++
endif

ifeq ($(call capable_2a,$(CLANG)),1)
  CLANG_VERSION = $(shell $(CLANG) --version | grep version | cut -d ' ' -f 3)
  ifeq ($(filter 7.%,$(CLANG_VERSION)),)
    $(info Warinig: unsupported CLANG version $(CLANG_VERSION))
    undefine CLANG_VERSION
  endif
endif
ifneq ($(CLANG_VERSION),)
  FOUND_COMPILERS += CLANG
else
  undefine CLANG
endif

# ----------------------------------------------------------------------
# gcc
# ----------------------------------------------------------------------

GCC8 = g++-8
ifeq ($(call capable_2a,$(GCC8)),1)
  GCC8_VERSION = $(shell $(GCC8) --version | head -n 1 | rev | cut -d ' ' -f 1 | rev)
endif
ifneq ($(GCC8_VERSION),)
  FOUND_COMPILERS += GCC8
else
  undefine GCC8
endif

# ----------------------------------------------------------------------

ifeq ($(FOUND_COMPILERS),)
  $(error No 2a compilers found)
endif

ifeq ($(PLATFORM),darwin)
  ifeq ($(findstring CLANG,$(FOUND_COMPILERS)),CLANG)
    DEFAULT_COMPILER = CLANG
  else
    DEFAULT_COMPILER = $(word 1,$(FOUND_COMPILERS))
  endif
endif

ifeq ($(PLATFORM),linux)
  ifeq ($(findstring GCC8,$(FOUND_COMPILERS)),GCC8)
    DEFAULT_COMPILER = GCC8
  else
    DEFAULT_COMPILER = $(word 1,$(FOUND_COMPILERS))
  endif
endif

# ----------------------------------------------------------------------

ifeq ($(DEFAULT_COMPILER),)
  $(error No compiler found)
endif

ifeq ($(C),)
  C = $(DEFAULT_COMPILER)
else ifeq ($(findstring $(C),$(FOUND_COMPILERS)),)
  $(error Not supported compiler $(C), use either of $(FOUND_COMPILERS))
endif

ifeq ($(C),CLANG)
  override CXX = $(CLANG)
  CXX_NAME = clang++ $(CLANG_VERSION)
  CXX_LIBS = $(CLANG_LIBS) -lomp
  WARNINGS = -Wno-weak-vtables -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded
else ifeq ($(C),GCC8)
  override CXX = $(GCC8)
  CXX_NAME = g++ $(GCC8_VERSION)
  CXX_LIBS = -lstdc++fs
  WARNINGS = -Wall -Wextra
endif

ifeq ($(DEBUG),1)
  OPT = -O0 -fno-inline-functions -Wno-source-uses-openmp
  CXX_NAME += DEBUG
else
  OPT = -O3 $(MAVX) -mtune=intel -fopenmp
  CXX_NAME += OPT
endif

ifeq ($(PLATFORM),darwin)
  MAVX = -mavx
else ifeq ($(PLATFORM),linux)
  # David B has machine with i7 920 which does not support AVX, so -mavx is replaced with -msse4
  MAVX = -msse4 -mfpmath=sse
endif

PKG_INCLUDES = $(shell pkg-config --cflags liblzma) $(shell pkg-config --cflags zlib)
INCLUDES = -I$(AD_INCLUDE) -Icc -I$(BUILD)/include $(PKG_INCLUDES) $(PYTHON_INCLUDES) $(CAIRO_INCLUDES) $(OPENSSL_INCLUDES) $(MONGO_INCLUDES) $(LIBCURL_INCLUDES)
CXXFLAGS = -g -MMD $(OPT) -fPIC -std=c++2a $(WARNINGS) $(INCLUDES)
LDFLAGS = $(OPT)

XZ_LIBS = $$(pkg-config --libs liblzma)
GZ_LIBS = $$(pkg-config --libs zlib)
BZ2_LIBS = -lbz2

# ----------------------------------------------------------------------

AD_PACKAGE_NAME = $(notdir $(CURDIR))

AD_INCLUDE = $(ACMACSD_ROOT)/include
AD_LIB = $(ACMACSD_ROOT)/lib
AD_SHARE = $(ACMACSD_ROOT)/share
AD_BIN = $(ACMACSD_ROOT)/bin
AD_PY = $(ACMACSD_ROOT)/py
AD_DATA = $(ACMACSD_ROOT)/data
AD_SOURCES = $(ACMACSD_ROOT)/sources

BUILD = $(abspath $(ACMACSD_ROOT)/build/$(AD_PACKAGE_NAME)/build)
DIST = $(abspath $(ACMACSD_ROOT)/build/$(AD_PACKAGE_NAME)/dist)

ifeq ($(PLATFORM),linux)
  AD_RPATH = -Wl,-rpath,$(AD_LIB)
endif

# $(1) - source lib
ifeq ($(PLATFORM),darwin)
  define install_lib
    ln -sf $(1) $(AD_LIB)
    /usr/bin/install_name_tool -id $(AD_LIB)/$(notdir $(1)) $(AD_LIB)/$(notdir $(1))
  endef
else ifeq ($(PLATFORM),linux)
  define install_lib
    ln -sf $(1) $(AD_LIB)
    ln -sf $(notdir $(1)) $(AD_LIB)/$(basename $(notdir $(1)))
  endef
endif

# ----------------------------------------------------------------------

# $(1) - package name
define install_headers
  if [ ! -d $(AD_INCLUDE)/$(1) ]; then mkdir $(AD_INCLUDE)/$(1); fi
  $(call symbolic_link_wildcard,$(abspath cc)/*.hh,$(AD_INCLUDE)/$(1))
endef
#  for f in $(abspath cc)/*.hh; do $(call symbolic_link,$$f,$(AD_INCLUDE)/$(1)); done

# $(1) - source wildcard, $(2) - target
define symbolic_link_wildcard
  for f in $(1); do \
    $(call symbolic_link,$$f,$(2)); \
  done
endef

# $(1) - source, $(2) - target
define symbolic_link
  if [ -d $(2) ] && [ ! -L $(2) ]; then \
    if [ ! -f $(2)/$$(basename $(1)) ]; then ln -sfv $(1) $(2); fi; \
  else \
    if [ ! -f $(2) ] && [ ! -d $(2) ]; then ln -sfv $(1) $(2); fi; \
  fi
endef

# $(1) - name, $(2) - major, $(3) - minor
ifeq ($(PLATFORM),darwin)
  # shared_lib_name = $(1).$(2).$(3).dylib
  shared_lib_name = $(1).$(2).dylib
else ifeq ($(PLATFORM),linux)
  shared_lib_name = $(1).so.$(2)
endif

# $(1) - name, $(2) - major, $(3) - minor
ifeq ($(PLATFORM),darwin)
  make_shared_lib = $(CXX) -dynamiclib -current_version $(2).$(3) -compatibility_version $(2).0
else ifeq ($(PLATFORM),linux)
  make_shared_lib = $(CXX) -shared -Wl,-soname,$(1).so.$(2) -Wl,-rpath,'$$ORIGIN'
  # define make_shared
  #   $(CXX) -shared -Wl,-soname,$(1).so.$(2) -Wl,-rpath,'$$ORIGIN'
  # endef
endif

echo_echo = printf "%-16s %s\n"
echo_compile = $(echo_echo) "$(CXX_NAME)" $(1)
echo_shared_lib = $(echo_echo) "SharedLib" $(1)
echo_link_exe = $(echo_echo) "LinkExe" $(1)

# ----------------------------------------------------------------------
# python
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_PYTHON),1)
  PYTHON_CONFIG = python3-config
  PYTHON_MODULE_SUFFIX = $(shell $(PYTHON_CONFIG) --extension-suffix)

  PYTHON_LIBS = $(shell $(PYTHON_CONFIG) --ldflags | sed -E 's/-Wl,-stack_size,[0-9]+//')
  PYTHON_INCLUDES = $(shell $(PYTHON_CONFIG) --includes)

  # $(1) - source lib
  define install_py_lib
    $(call symbolic_link,$(1),$(AD_PY))
  endef
endif

# ----------------------------------------------------------------------
# boost
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_BOOST),1)
  ifeq (,$(realpath /usr/include/boost/version.hpp /usr/local/include/boost/version.hpp))
    ifeq ($(PLATFORM),darwin)
      $(error install boost: brew install boost)
    else
      $(error install boost: apt-get install libboost-dev)
    endif
  endif
  BOOST_LIB_PATH = $(dir $(dir $(dir $(realpath /usr/include/boost/version.hpp /usr/local/include/boost/version.hpp))))/lib
  # BOOST_LIB_PATH = $(AD_LIB)
  # BOOST_LIB_PATH = $(AD_LIB)
endif

# ----------------------------------------------------------------------
# cairo
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_CAIRO),1)
  CAIRO_LIBS = $(shell pkg-config --libs cairo)
  CAIRO_INCLUDES = $(shell pkg-config --cflags cairo)
endif

# ----------------------------------------------------------------------
# openssl
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_OPENSSL),1)
  ifeq ($(PLATFORM),darwin)
    OPENSSL_LIBS = -L/usr/local/opt/openssl/lib $(shell pkg-config --libs openssl)
    OPENSSL_INCLUDES = -I/usr/local/opt/openssl/include
  else
    OPENSSL_LIBS = $(shell pkg-config --libs openssl)
    OPENSSL_INCLUDES = $(shell pkg-config --cflags openssl)
  endif
endif

# ----------------------------------------------------------------------
# mongo
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_MONGO),1)
  MONGO_LIBS = -L$(AD_LIB) -lmongocxx -lbsoncxx
  MONGO_INCLUDES = -I$(AD_INCLUDE)/mongocxx/v_noabi -I$(AD_INCLUDE)/bsoncxx/v_noabi
  # MONGO_LIBS = $(shell pkg-config --libs libmongoc-1.0)
  # MONGO_INCLUDES = $(shell pkg-config --cflags libmongoc-1.0)
endif

# ----------------------------------------------------------------------
# libcurl
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_LIBCURL),1)
  ifneq ($(shell if pkg-config libcurl; then echo 1; fi),1)
    $(error Please install libcurl (apt-get install libcurl4-openssl-dev))
  endif
  LIBCURL_LIBS = $(shell pkg-config --libs libcurl)
  LIBCURL_INCLUDES = $(shell pkg-config --cflags libcurl)
endif

# ----------------------------------------------------------------------
# sass
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_SASS),1)
  SASSC = sassc
  ifeq ($(shell if $(SASSC) -v >/dev/null 2>&1; then echo 1; fi),)
    $(error Please install SASSC)
  endif

  # $(1) - target
  # $(2) - source
  define sass
    echo "SASS       " $(notdir $@)
    $(SASSC) --style compressed -I sass $(abspath $<) $(basename $@)
    gzip -9f $(basename $@)
  endef
endif

# ----------------------------------------------------------------------
# rtags
# ----------------------------------------------------------------------

ifndef RTAGS_TARGET
RTAGS_TARGET = all
endif

rtags:
	make -nkB $(RTAGS_TARGET) | /usr/local/bin/rc --compile - || true

# ----------------------------------------------------------------------

-include $(BUILD)/*.d

# ----------------------------------------------------------------------
# rules
# ----------------------------------------------------------------------

# abspath below is to show full file path by __FILE__ macro used in logging
$(BUILD)/%.o: cc/%.cc | $(BUILD) install-headers
	$(call echo_compile,$<)
	$(CXX) $(CXXFLAGS) -c -o $@ $(abspath $<)

install-headers:
	$(call install_headers,$(AD_PACKAGE_NAME))

ifeq ($(NO_CLEAN_TARGET),)
clean:
	rm -rf $(DIST) $(BUILD)
endif

$(DIST):
	mkdir -pv $(DIST)
	$(call symbolic_link,$(DIST),dist)

$(BUILD):
	mkdir -pv $(BUILD)
	$(call symbolic_link,$(BUILD),build)

# avoid deleting intermediate files
.SECONDARY:

# ----------------------------------------------------------------------

help-vars:
	printf "\nVariables:\n"
	printf "\tVERBOSE=1 - echo commands being executed\n"
	printf "\tDEBUG=1 - disable optimisation and omp\n"
	printf "\tC=CLANG or C=GCC8 - compiler to use\n"
	printf "\n"

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
