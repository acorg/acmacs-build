#! /bin/bash

# ----------------------------------------------------------------------

SOURCE_DIR=$HOME/AD
TARGET_DIR=$HOME/AD

NPROC=$(if [ "$(uname -s)" = "Darwin" ]; then /usr/sbin/sysctl -n hw.logicalcpu; else /usr/bin/nproc; fi)
DEV=""
GIT_URI="https://github.com/acorg"
TT="T=R"
ACORG_ONLY=""
TAG="master"
QUICK="no"

ARGV0=$(python3 -c "import os; print(os.path.realpath(\"$0\"))")

# ----------------------------------------------------------------------

main()
{
    trap fail ERR
    date
    export ACMACSD_ROOT="${TARGET_DIR}"
    export LD_LIBRARY_PATH="${ACMACSD_ROOT}/lib:${LD_LIBRARY_PATH}"
    echo ACMACSD_ROOT="${ACMACSD_ROOT}"
    echo TARGET_DIR="${TARGET_DIR}"
    echo SOURCE_DIR="${SOURCE_DIR}"
    build_dir
    make_dirs
    prepare_makefile_includes
    local PACKAGES_FILE="$(dirname ${ARGV0})/../packages.${TAG}"
    if [[ -z "${ACORG_ONLY}" ]]; then
        install_requirements "${PACKAGES_FILE}"
    fi
    install_build_bin
    for package in $(cat "${PACKAGES_FILE}"); do
        install_acorg_package "${package}"
    done
}

# ----------------------------------------------------------------------

make_dirs()
{
    trap fail ERR
    mkdir -p "${SOURCE_DIR}/sources" "${TARGET_DIR}" "${BUILD_ROOT}/sources"
    for d in bin lib include py data share share/makefiles; do
        if [[ ! -d "${TARGET_DIR}/${d}" ]]; then
            mkdir "${TARGET_DIR}/${d}"
        fi
        if [[ "${SOURCE_DIR}" != "${TARGET_DIR}" ]]; then
            ln -sf "${TARGET_DIR}/${d}" "${SOURCE_DIR}"
        fi
    done
}

# ----------------------------------------------------------------------

install_acorg_package()
{
    trap fail ERR
    echo Updating "$1"
    local PACKAGE_DIR="${SOURCE_DIR}/sources/$1"

    if [[ -d "${PACKAGE_DIR}" ]]; then
        ( cd "${PACKAGE_DIR}" && git pull )
    elif [[ "${TAG}" == "master" ]]; then
        git clone "${GIT_URI}/$1.git" "${PACKAGE_DIR}"
    else
        git clone "${GIT_URI}/$1.git" --branch "${TAG}" --depth 1 "${PACKAGE_DIR}"
    fi

    if [[ "$1" == "acmacs.r" ]]; then
        install_acmacs_r "$1"
    else
        if [[ "${QUICK}" == "yes" ]]; then
            make -C "${PACKAGE_DIR}" -w -j$NPROC $TT install
        else
            make -C "${PACKAGE_DIR}" -w clean
            make -C "${PACKAGE_DIR}" -w -j$NPROC $TT install
            make -C "${PACKAGE_DIR}" -w -j$NPROC $TT test
        fi
    fi
}

# ----------------------------------------------------------------------

install_acmacs_r()
{
    trap fail ERR
    local PACKAGE_DIR="${SOURCE_DIR}/sources/$1"
    if [[ -d "${R}" ]]; then
        local R_LOCAL_DIR="${R}/R"
    else
        local R_LOCAL_DIR="${HOME}/R"
    fi

    make -C "${PACKAGE_DIR}" -w -j$NPROC ROOT_DIR="${R_LOCAL_DIR}"
}

# ----------------------------------------------------------------------

prepare_makefile_includes()
{
    # cmake (for mongo cxx)
    if [[ "$(cmake --version 2>/dev/null | grep version | cut -d ' ' -f 3 | cut -d '.' -f 1)" < "3" ]]; then
        fail "cmake 3.2 or later required"
    fi

    # python
    # sassc
    # -L/usr/local/opt/openssl/lib $(shell pkg-config --libs libssl)
    # $(shell pkg-config --libs liblzma)
    # $(shell pkg-config --libs libcrypto)

    local PROG="$(dirname ${ARGV0})/install-makefiles"
    local MAKEFILES_SRC="$(dirname ${ARGV0})/../makefiles"
    local MAKEFILES_DEST="${TARGET_DIR}/share/makefiles"
    "$PROG" "${MAKEFILES_SRC}" "${MAKEFILES_DEST}" "${BUILD_ROOT}"
}

# ----------------------------------------------------------------------

install_requirements()
{
    trap fail ERR

    install_pybind11
    install_rapidjson
    install_boost
    if grep acmacs-webserver "$1" >/dev/null 2>&1; then
        install_websocketpp
    fi
    if grep acmacs-api "$1" >/dev/null 2>&1; then
        install_libbson_for_mongodb2
        install_mongo_c_driver_for_mongodb2
        install_mongo_cxx_driver_for_mongodb2
    fi
}

# ----------------------------------------------------------------------

clone_or_pull_requirements()
{
    trap fail ERR
    local PACKAGE_DIR="$1"
    shift
    local CLONE_ARGS="$@"
    if [[ -d "${PACKAGE_DIR}" ]]; then
        ( cd "${PACKAGE_DIR}" && git pull )
    else
        git clone ${CLONE_ARGS} --depth 1 "${PACKAGE_DIR}"
    fi
}

# ----------------------------------------------------------------------

install_pybind11()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/pybind11"
    clone_or_pull_requirements "${PACKAGE_DIR}" "https://github.com/pybind/pybind11.git"
    ln -sf "${PACKAGE_DIR}/include/"* "${TARGET_DIR}/include"
}

# ----------------------------------------------------------------------

install_rapidjson()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/rapidjson"
    clone_or_pull_requirements "${PACKAGE_DIR}" "https://github.com/Tencent/rapidjson.git"
    ln -sf "${PACKAGE_DIR}/include/"* "${TARGET_DIR}/include"
}

# ----------------------------------------------------------------------

install_boost()
{
    trap fail ERR
    local PROG="$(dirname ${ARGV0})/install-boost"
    "$PROG" "${TARGET_DIR}"
}

# ----------------------------------------------------------------------

install_websocketpp()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/websocketpp"
    clone_or_pull_requirements "${PACKAGE_DIR}" "https://github.com/zaphoyd/websocketpp.git"
    ln -sf "${PACKAGE_DIR}/websocketpp" "${TARGET_DIR}/include"
}

# ----------------------------------------------------------------------

# http://mongoc.org/libmongoc/current/installing.html
# mongoc starting with version 1.10 does not support mongodb 2.6 (we use 2.6.6 on albertine)
install_mongo_c_driver_for_mongodb3()
{
    trap fail ERR
    local VERSION=1.11.0 # 2018-07-14
    local PACKAGE_DIR="${BUILD_ROOT}/sources/mongo-c-driver-${VERSION}"
    if [[ -d "${PACKAGE_DIR}" ]]; then
        cd "${BUILD_ROOT}/sources"
        /usr/bin/curl -L -s https://github.com/mongodb/mongo-c-driver/releases/download/${VERSION}/mongo-c-driver-${VERSION}.tar.gz | tar xzf -
    fi
    cd "${PACKAGE_DIR}/build"
    cmake -DENABLE_AUTOMATIC_INIT_AND_CLEANUP=OFF -DCMAKE_BUILD_TYPE=Release  -DCMAKE_INSTALL_PREFIX="${TARGET_DIR}" -DCMAKE_PREFIX_PATH="${TARGET_DIR}" ..
    make -j$NPROC
    make install
    if [ "$(uname)" == "Darwin" ]; then
        cd "${TARGET_DIR}/lib"
        for library in libbson-1.0.dylib libmongoc-1.0.dylib; do
            /usr/bin/install_name_tool -id "${TARGET_DIR}/lib/$library" "$library"
        done
        /usr/bin/install_name_tool -change "libbson-1.0.0.dylib" "${TARGET_DIR}/lib/libbson-1.0.0.dylib" "libmongoc-1.0.0.dylib"
    fi
}

install_mongo_c_driver_for_mongodb2()
{
    trap fail ERR
    local VERSION=1.9.5 # cannot use 1.10+, it does not support mongodb2
    local PACKAGE_DIR="${BUILD_ROOT}/sources/mongo-c-driver-${VERSION}"
    if [[ ! -d "${PACKAGE_DIR}" ]]; then
        cd "${BUILD_ROOT}/sources"
        /usr/bin/curl -L -s https://github.com/mongodb/mongo-c-driver/releases/download/${VERSION}/mongo-c-driver-${VERSION}.tar.gz | tar xzf -
        cd "${PACKAGE_DIR}"
        ./configure --disable-automatic-init-and-cleanup --prefix="${TARGET_DIR}"
        make -j$NPROC
        make install
    fi
}

# ----------------------------------------------------------------------

install_libbson_for_mongodb2()
{
    trap fail ERR
    local VERSION=1.9.5
    local PACKAGE_DIR="${BUILD_ROOT}/sources/libbson-${VERSION}"
    if [[ ! -d "${PACKAGE_DIR}" ]]; then
        cd "${BUILD_ROOT}/sources"
        /usr/bin/curl -L -s https://github.com/mongodb/libbson/releases/download/${VERSION}/libbson-${VERSION}.tar.gz | tar xzf -
        cd "${PACKAGE_DIR}"
        ./configure --disable-automatic-init-and-cleanup --prefix="${TARGET_DIR}"
        make -j$NPROC
        make install
    fi
}

# ----------------------------------------------------------------------

# https://mongodb.github.io/mongo-cxx-driver/mongocxx-v3/installation/
install_mongo_cxx_driver_for_mongodb3()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/mongo-cxx-driver"
    clone_or_pull_requirements "${PACKAGE_DIR}" "https://github.com/mongodb/mongo-cxx-driver.git" --branch releases/stable
    export PKG_CONFIG_PATH="${TARGET_DIR}"/lib/pkgconfig
    cd "${PACKAGE_DIR}/build"
    cmake -DCMAKE_BUILD_TYPE=Release -DBSONCXX_POLY_USE_MNMLSTC=1 -DCMAKE_INSTALL_PREFIX="${TARGET_DIR}" -DCMAKE_PREFIX_PATH="${TARGET_DIR}" ..
    # -DBSONCXX_POLY_USE_BOOST=1
    # Only for MNMLSTC polyfill (default on Linux and macos
    # make EP_mnmlstc_core
    make -j$NPROC
    make install
    if [ "$(uname)" == "Darwin" ]; then
        cd "${TARGET_DIR}/lib"
        rm -f *.a
        for library in libbsoncxx._noabi.dylib libmongocxx._noabi.dylib; do
            /usr/bin/install_name_tool -id "${TARGET_DIR}/lib/$library" "$library"
        done
        /usr/bin/install_name_tool -change "@rpath/libbsoncxx._noabi.dylib" "${TARGET_DIR}/lib/libbsoncxx._noabi.dylib" "libmongocxx._noabi.dylib"
        # /usr/bin/install_name_tool -change "@rpath/libmongoc-1.0.0.dylib" "${TARGET_DIR}/lib/libmongoc-1.0.0.dylib" "libmongocxx._noabi.dylib"
        # /usr/bin/install_name_tool -change "libbson-1.0.0.dylib" "${TARGET_DIR}/lib/libbson-1.0.0.dylib" "libmongocxx._noabi.dylib"
        # /usr/bin/install_name_tool -change "libbson-1.0.0.dylib" "${TARGET_DIR}/lib/libbson-1.0.0.dylib" "libbsoncxx._noabi.dylib"
    fi
}

install_mongo_cxx_driver_for_mongodb2()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/mongo-cxx-driver"
    clone_or_pull_requirements "${PACKAGE_DIR}" "https://github.com/mongodb/mongo-cxx-driver.git" --branch releases/v3.2
    export PKG_CONFIG_PATH="${TARGET_DIR}"/lib/pkgconfig
    cd "${PACKAGE_DIR}/build"
    cmake -DCMAKE_BUILD_TYPE=Release -DBSONCXX_POLY_USE_MNMLSTC=1 -DCMAKE_INSTALL_PREFIX="${TARGET_DIR}" -DCMAKE_PREFIX_PATH="${TARGET_DIR}" ..
    # -DBSONCXX_POLY_USE_BOOST=1
    # Only for MNMLSTC polyfill (default on Linux and macos
    # make EP_mnmlstc_core
    make -j$NPROC
    make install
    if [ "$(uname)" == "Darwin" ]; then
        cd "${TARGET_DIR}/lib"
        rm -f *.a
        for library in libbsoncxx._noabi.dylib libmongocxx._noabi.dylib; do
            /usr/bin/install_name_tool -id "${TARGET_DIR}/lib/$library" "$library"
        done
        /usr/bin/install_name_tool -change "@rpath/libbsoncxx._noabi.dylib" "${TARGET_DIR}/lib/libbsoncxx._noabi.dylib" "libmongocxx._noabi.dylib"
    fi
}

# ----------------------------------------------------------------------

install_build_bin()
{
    for prog in rtags-all; do
        ln -sf "$(dirname $0)/${prog}" "${TARGET_DIR}/bin"
    done
    printf "${TAG}" >"${TARGET_DIR}/share/tag"
}

# ----------------------------------------------------------------------

parse_args()
{
    local OPTIND
    local optchar
    while getopts ":h-:" optchar "$@"; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    source)
                        SOURCE_DIR="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    source=*)
                        SOURCE_DIR=${OPTARG#*=}
                        ;;
                    target)
                        TARGET_DIR="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    target=*)
                        TARGET_DIR=${OPTARG#*=}
                        ;;
                    dev)
                        DEV="yes"
                        TT="T=D"
                        GIT_URI="git@github.com:acorg"
                        TAG="master"
                        ;;
                    dev-release)
                        DEV="yes"
                        TT="T=R"
                        GIT_URI="git@github.com:acorg"
                        TAG="master"
                        ;;
                    acorg-only)
                        ACORG_ONLY="yes"
                        ;;
                    tag)
                        TAG="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    quick)
                        QUICK="yes"
                        ;;
                    help)
                        usage
                        ;;
                    *)
                        if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                            echo "Unknown option --${OPTARG}" >&2
                            usage
                        fi
                        ;;
                esac
                ;;
            h)
                usage
                ;;
            *)
                if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                    echo "Non-option argument: '-${OPTARG}'" >&2
                fi
                ;;
        esac
    done
}

# ----------------------------------------------------------------------

usage()
{
    echo "usage: $0 [--source[=]<dir>] [--target[=]<dir>] [--dev|--dev-release] [--acorg-only] [--quick] [--tag=201710]" >&2
    exit 2
}

# ----------------------------------------------------------------------

build_dir()
{
    if [[ "$USER" == "eu" && -f /r/ramdisk-id ]]; then
        BUILD_ROOT=/r/AD
    else
        BUILD_ROOT="$SOURCE_DIR"
    fi
}

# ----------------------------------------------------------------------

fail()
{
    echo ERROR: "$@" >&2
    exit 2
}

trap fail ERR
parse_args "$@"
main

## ----------------------------------------------------------------------
## Local Variables:
## eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
## End:
