#! /bin/bash

# ----------------------------------------------------------------------

SOURCE_DIR=$HOME/AD
TARGET_DIR=$HOME/AD

NPROC=$(if [ "$(uname -s)" = "Darwin" ]; then /usr/sbin/sysctl -n hw.logicalcpu; else /usr/bin/nproc; fi)
DEV=""
GIT_URI="https://github.com/acorg"
TT="T=R"

# ----------------------------------------------------------------------

main()
{
    trap fail ERR
    build_dir
    make_dirs
    prepare_makefile_includes
    install_requirements
    install_acorg_package acmacs-base
}

# ----------------------------------------------------------------------

make_dirs()
{
    trap fail ERR
    mkdir -p "$SOURCE_DIR/sources" "$TARGET_DIR" "$BUILD_ROOT"/sources
    for d in bin lib include include/acmacs-base py data; do
        if [[ ! -d "$TARGET_DIR/$d" ]]; then
            mkdir "$TARGET_DIR/$d"
        fi
    done
}

# ----------------------------------------------------------------------

install_acorg_package()
{
    trap fail ERR
    echo Updating "$1"
    local PACKAGE_DIR="${SOURCE_DIR}/sources/$1"

    if [[ -d "${PACKAGE_DIR}" ]]; then
        ( cd "${PACKAGE_DIR}" && git pull )
    else
        git clone "${GIT_URI}/$1.git" "${PACKAGE_DIR}"
    fi

    make -C "${PACKAGE_DIR}" clean
    make -C "${PACKAGE_DIR}" -j$NPROC $TT install
    make -C "${PACKAGE_DIR}" -j$NPROC $TT test
}

# ----------------------------------------------------------------------

prepare_makefile_includes()
{
    # cmake (for mongo cxx)
    if [[ "$(cmake --version 2>/dev/null | grep version | cut -d ' ' -f 3)" < "3.6" ]]; then
        fail "cmake 3.6 or later required"
    fi

    # g++
    # python
}

# ----------------------------------------------------------------------

install_requirements()
{
    trap fail ERR
    install_pybind11
    install_rapidjson
    install_boost
    install_websocketpp
    install_mongo_c_driver
    install_mongo_cxx_driver
}

# ----------------------------------------------------------------------

clone_or_pull()
{
    trap fail ERR
    local PACKAGE_DIR="$1"
    shift
    local CLONE_ARGS="$@"
    if [[ -d "${PACKAGE_DIR}" ]]; then
        ( cd "${PACKAGE_DIR}" && git pull )
    else
        git clone ${CLONE_ARGS} "${PACKAGE_DIR}"
    fi
}

# ----------------------------------------------------------------------

install_pybind11()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/pybind11"
    clone_or_pull "${PACKAGE_DIR}" "https://github.com/pybind/pybind11.git"
    ln -sf "${PACKAGE_DIR}/include/"* "${TARGET_DIR}/include"
}

# ----------------------------------------------------------------------

install_rapidjson()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/rapidjson"
    clone_or_pull "${PACKAGE_DIR}" "https://github.com/Tencent/rapidjson.git"
    ln -sf "${PACKAGE_DIR}/include/"* "${TARGET_DIR}/include"
}

# ----------------------------------------------------------------------

install_boost()
{
    trap fail ERR
}

# ----------------------------------------------------------------------

install_websocketpp()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/websocketpp"
    clone_or_pull "${PACKAGE_DIR}" "https://github.com/zaphoyd/websocketpp.git"
    ln -sf "${PACKAGE_DIR}/websocketpp" "${TARGET_DIR}/include"
}

# ----------------------------------------------------------------------

# http://mongoc.org/libmongoc/current/installing.html
install_mongo_c_driver()
{
    trap fail ERR
    local VERSION=1.6.3
    local PACKAGE_DIR="${BUILD_ROOT}/sources/mongo-c-driver-${VERSION}"
    if [[ ! -d "${PACKAGE_DIR}" ]]; then
        cd "${BUILD_ROOT}/sources"
        /usr/bin/curl -L -s https://github.com/mongodb/mongo-c-driver/releases/download/${VERSION}/mongo-c-driver-${VERSION}.tar.gz | tar xzf -
        cd "${PACKAGE_DIR}"
        ./configure --disable-automatic-init-and-cleanup --prefix="${TARGET_DIR}"
        make -j$NPROC
        make install
    fi
}

# ----------------------------------------------------------------------

# https://mongodb.github.io/mongo-cxx-driver/mongocxx-v3/installation/
install_mongo_cxx_driver()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/mongo-cxx-driver"
    clone_or_pull "${PACKAGE_DIR}" "https://github.com/mongodb/mongo-cxx-driver.git" --branch releases/stable --depth 1
    export PKG_CONFIG_PATH="${TARGET_DIR}"/lib/pkgconfig
    cd "${PACKAGE_DIR}/build"
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${TARGET_DIR}" ..
    # -DBSONCXX_POLY_USE_BOOST=1
    # Only for MNMLSTC polyfill (default on Linux and macos
    # make EP_mnmlstc_core
    make -j$NPROC
    make install
    if [ "$(uname)" == "Darwin" ]; then
        cd "${TARGET_DIR}/lib"
        rm -f *.a
        for library in libbsoncxx._noabi.dylib libmongocxx._noabi.dylib; do
            /usr/bin/install_name_tool -id "${TARGET_DIR}/lib/$library" "$library"
        done
        /usr/bin/install_name_tool -change "@rpath/libbsoncxx._noabi.dylib" "${TARGET_DIR}/lib/libbsoncxx._noabi.dylib" "libmongocxx._noabi.dylib"
    fi
}

# ----------------------------------------------------------------------

parse_args()
{
    local OPTIND
    local optchar
    while getopts ":h-:" optchar "$@"; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    source)
                        SOURCE_DIR="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    source=*)
                        SOURCE_DIR=${OPTARG#*=}
                        ;;
                    target)
                        TARGET_DIR="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    target=*)
                        TARGET_DIR=${OPTARG#*=}
                        ;;
                    dev)
                        DEV="yes"
                        TT="T=D"
                        GIT_URI="git@github.com:acorg"
                        ;;
                    *)
                        if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                            echo "Unknown option --${OPTARG}" >&2
                        fi
                        ;;
                esac
                ;;
            h)
                echo "usage: $0 [--source[=]<dir>] [--target[=]<dir>] [--dev]" >&2
                exit 2
                ;;
            *)
                if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                    echo "Non-option argument: '-${OPTARG}'" >&2
                fi
                ;;
        esac
    done
}

# ----------------------------------------------------------------------

build_dir()
{
    if [[ "$USER" == "eu" && -f /r/ramdisk-id ]]; then
        BUILD_ROOT=/r/AD
    else
        BUILD_ROOT="$SOURCE_DIR"
    fi
}

# ----------------------------------------------------------------------

fail()
{
    echo ERROR: "$@" >&2
    exit 2
}

trap fail ERR
parse_args "$@"
main

## ----------------------------------------------------------------------
## Local Variables:
## eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
## End:
