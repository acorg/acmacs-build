#! /bin/bash

# ----------------------------------------------------------------------

SOURCE_DIR=$HOME/AD
TARGET_DIR=$HOME/AD

NPROC=$(if [ "$(uname -s)" = "Darwin" ]; then /usr/sbin/sysctl -n hw.logicalcpu; else /usr/bin/nproc; fi)
DEV=""
GIT_URI="https://github.com/acorg"
TT="T=R"
ACORG_ONLY=""

# ----------------------------------------------------------------------

main()
{
    trap fail ERR
    export ACMACSD_ROOT="${TARGET_DIR}"
    echo ACMACSD_ROOT="${ACMACSD_ROOT}"
    build_dir
    make_dirs
    prepare_makefile_includes
    if [[ -z "${ACORG_ONLY}" ]]; then
        install_requirements
    fi
    install_acorg_package acmacs-base
    install_acorg_package locationdb
    install_acorg_package acmacs-chart
    install_acorg_package hidb
    install_acorg_package seqdb
    install_acorg_package acmacs-draw
    install_acorg_package acmacs-map-draw
    install_acorg_package acmacs-tree-maker
    install_acorg_package signature-page
    install_acorg_package ssm-report
    install_acorg_package acmacs-whocc
    install_acorg_package acmacs-webserver
    install_acorg_package acmacs-api
}

# ----------------------------------------------------------------------

make_dirs()
{
    trap fail ERR
    mkdir -p "${SOURCE_DIR}/sources" "${TARGET_DIR}" "${BUILD_ROOT}/sources"
    for d in bin lib include py data share share/makefiles; do
        if [[ ! -d "${TARGET_DIR}/${d}" ]]; then
            mkdir "${TARGET_DIR}/${d}"
        fi
        if [[ "${SOURCE_DIR}" != "${TARGET_DIR}" ]]; then
            ln -sf "${TARGET_DIR}/${d}" "${SOURCE_DIR}"
        fi
    done
}

# ----------------------------------------------------------------------

install_acorg_package()
{
    trap fail ERR
    echo Updating "$1"
    local PACKAGE_DIR="${SOURCE_DIR}/sources/$1"

    if [[ -d "${PACKAGE_DIR}" ]]; then
        ( cd "${PACKAGE_DIR}" && git pull )
    else
        git clone "${GIT_URI}/$1.git" "${PACKAGE_DIR}"
    fi

    make -C "${PACKAGE_DIR}" -w clean
    make -C "${PACKAGE_DIR}" -w -j$NPROC $TT install
    make -C "${PACKAGE_DIR}" -w -j$NPROC $TT test
}

# ----------------------------------------------------------------------

prepare_makefile_includes()
{
    # cmake (for mongo cxx)
    if [[ "$(cmake --version 2>/dev/null | grep version | cut -d ' ' -f 3)" < "3.2" ]]; then
        fail "cmake 3.2 or later required"
    fi

    find_gcc_$(uname)

    # python
    # sassc
    # -L/usr/local/opt/openssl/lib $(shell pkg-config --libs libssl)
    # $(shell pkg-config --libs liblzma)
    # $(shell pkg-config --libs libcrypto)

    install_makefiles
}

# ----------------------------------------------------------------------

find_gcc_Darwin()
{
    trap fail ERR
    if [[ "$(/usr/local/opt/llvm/bin/clang++ --version | grep version | cut -d ' ' -f 3)" > "5.0" ]]; then
        echo llvm 5.0+
        makefile_gxx "/usr/local/opt/llvm/bin/clang++" "c++17" "-Wno-weak-vtables -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded" "clang++-5  " "-L/usr/local/opt/llvm/lib -lc++experimental"
    else
        fail "llvm 5.0+ required on macOS, use \"brew install llvm\" to install it"
    fi
}

find_gcc_Linux()
{
    trap fail ERR
    if [[ "$(g++-7 --version | head -n 1 | cut -d ' ' -f 3)" > "7.2" ]]; then
        echo gcc 7.2
        makefile_gxx "g++-7" "c++1z" "-Wall -Wextra" "g++-7      " "-lstdc++fs"
    else
        fail "g++ 7.2+ required on Linux"
    fi
}

makefile_gxx()
{
    local CXX="$1"
    local STD="$2"
    local WARNINGS="$3"
    local CXX_NAME="$4"
    local FS_LIB="$5"

    cat >"${TARGET_DIR}/share/makefiles/Makefile.g++" <<EOF
CXX = ${CXX}
STD = ${STD}
WARNINGS = ${WARNINGS}
CXX_NAME = "${CXX_NAME}"
FS_LIB = ${FS_LIB}

T=D

ifeq (\$(T),D)
  OPTIMIZATION =
else ifeq (\$(T),R)
  # -fvisibility=hidden and -flto make resulting lib smaller (pybind11) but linking is much slower
  OPTIMIZATION = -O3
else ifeq (\$(MAKECMDGOALS),clean)
  # pass
else
  \$(error Please provide either T=D (debug) or T=R (release))
endif

PROFILE = # -pg
EOF
}

# ----------------------------------------------------------------------

install_makefiles()
{
    trap fail ERR
    local MAKEFILES_SRC=$(dirname $0)/../makefiles
    local MAKEFILES_DEST="${TARGET_DIR}/share/makefiles"
    if [[ ! -f "${MAKEFILES_DEST}/Makefile.dist-build.vars" ]]; then
        cp "${MAKEFILES_SRC}/Makefile.dist-build.vars.in" "${MAKEFILES_DEST}/Makefile.dist-build.vars"
        printf "\nPROJECT_BUILD_ROOT = ${BUILD_ROOT}/build/\$(PROJECT_NAME)" >>"${MAKEFILES_DEST}/Makefile.dist-build.vars"
    fi
    for nn in dist-build.rules rtags cheerp sass; do
        if [[ ! -f "${MAKEFILES_DEST}/Makefile.${nn}" ]]; then
            cp "${MAKEFILES_SRC}/Makefile.${nn}.in" "${MAKEFILES_DEST}/Makefile.${nn}"
        fi
    done
}

# ----------------------------------------------------------------------

install_requirements()
{
    trap fail ERR
    install_pybind11
    install_rapidjson
    install_boost
    install_websocketpp
    install_mongo_c_driver
    install_mongo_cxx_driver
}

# ----------------------------------------------------------------------

clone_or_pull()
{
    trap fail ERR
    local PACKAGE_DIR="$1"
    shift
    local CLONE_ARGS="$@"
    if [[ -d "${PACKAGE_DIR}" ]]; then
        ( cd "${PACKAGE_DIR}" && git pull )
    else
        git clone ${CLONE_ARGS} "${PACKAGE_DIR}"
    fi
}

# ----------------------------------------------------------------------

install_pybind11()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/pybind11"
    clone_or_pull "${PACKAGE_DIR}" "https://github.com/pybind/pybind11.git"
    ln -sf "${PACKAGE_DIR}/include/"* "${TARGET_DIR}/include"
}

# ----------------------------------------------------------------------

install_rapidjson()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/rapidjson"
    clone_or_pull "${PACKAGE_DIR}" "https://github.com/Tencent/rapidjson.git"
    ln -sf "${PACKAGE_DIR}/include/"* "${TARGET_DIR}/include"
}

# ----------------------------------------------------------------------

install_boost()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/boost"
    local SUBMODULES=(algorithm any array asio assert bind concept_check config container core date_time detail "function" function_types functional fusion integer io iterator lexical_cast locale math move mpl numeric optional predef preprocessor program_options range regex smart_ptr spirit static_assert system tokenizer throw_exception type_index type_traits typeof tti utility variant)
    local INCLUDE="${TARGET_DIR}/include/boost"

    clone_or_pull "${PACKAGE_DIR}" "https://github.com/boostorg/boost.git"
    cd "${PACKAGE_DIR}"
    for sub in "${SUBMODULES[@]}"; do
        git submodule update --init "libs/${sub}"
    done

    ln -sf "${PACKAGE_DIR}/boost" "${INCLUDE}"

    # if [[ ! -d "${INCLUDE}" ]]; then
    #     mkdir "${INCLUDE}"
    # fi
    # cd "${INCLUDE}"
    # for sub in "${SUBMODULES[@]}"; do
    #     # "cp -as" can be perhaps used instead of the below but it is not available on macOS
    #     for srcdir in $(find "${TARGET_DIR}/libs/${sub}" -name boost -type d | grep include/boost); do # ${TARGET_DIR}/libs/$sub may contain sub-projects
    #         for dirname in $(cd "${srcdir}"; find . -type d -not -name .); do
    #             if [[ ! -d "${dirname}" ]]; then
    #                 mkdir "${dirname}"
    #             fi
    #         done
    #         for filename in $(cd "${srcdir}"; find . -type f | cut -c 3-); do
    #             ln -sf "${srcdir}/${filename}" "${filename}"
    #         done
    #     done
    # done


    cd "${PACKAGE_DIR}"
    git submodule update --init tools/build
    git submodule update --init tools/inspect
    ./bootstrap.sh --with-libraries=date_time,program_options
    ./b2 cxxflags="-std=c++14 -DBOOST_NO_CXX11_SCOPED_ENUMS"
    for filename in $(cd "${PACKAGE_DIR}/stage/lib"; find . -type f | cut -c 3-); do
        ln -sf "${PACKAGE_DIR}/stage/lib/${filename}" "${TARGET_DIR}/lib/${filename}"
    done

    if [ "$(uname)" == "Linux" ]; then
        cd "${TARGET_DIR}/lib"
        rm -f *.a
        for libf in libboost*.so.*; do
            ln -sf "${libf}" "${libf%%.*}.so"
        done
    elif [ "$(uname)" == "Darwin" ]; then
        cd "${TARGET_DIR}/lib"
        rm -f *.a
        for library in libboost_*.dylib; do
            /usr/bin/install_name_tool -id "${TARGET_DIR}/lib/${library}" "${library}"
            /usr/bin/install_name_tool -change libboost_system.dylib "${TARGET_DIR}/lib/libboost_system.dylib" "${library}"
        done
    fi

    for pp in algorithm io utility; do
        # if compiled with g++7 this package includes required, but they perhaps was not linked (2017-09-17)
        if [[ ! -L "${TARGET_DIR}/include/boost/${pp}" ]]; then
            rm -rf "${TARGET_DIR}/include/boost/${pp}"
            ln -sf "${PACKAGE_DIR}/libs/${pp}/include/boost/"* "${TARGET_DIR}/include/boost/"
        fi
    done
}

# ----------------------------------------------------------------------

install_websocketpp()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/websocketpp"
    clone_or_pull "${PACKAGE_DIR}" "https://github.com/zaphoyd/websocketpp.git"
    ln -sf "${PACKAGE_DIR}/websocketpp" "${TARGET_DIR}/include"
}

# ----------------------------------------------------------------------

# http://mongoc.org/libmongoc/current/installing.html
install_mongo_c_driver()
{
    trap fail ERR
    local VERSION=1.6.3
    local PACKAGE_DIR="${BUILD_ROOT}/sources/mongo-c-driver-${VERSION}"
    if [[ ! -d "${PACKAGE_DIR}" ]]; then
        cd "${BUILD_ROOT}/sources"
        /usr/bin/curl -L -s https://github.com/mongodb/mongo-c-driver/releases/download/${VERSION}/mongo-c-driver-${VERSION}.tar.gz | tar xzf -
        cd "${PACKAGE_DIR}"
        ./configure --disable-automatic-init-and-cleanup --prefix="${TARGET_DIR}"
        make -j$NPROC
        make install
    fi
}

# ----------------------------------------------------------------------

# https://mongodb.github.io/mongo-cxx-driver/mongocxx-v3/installation/
install_mongo_cxx_driver()
{
    trap fail ERR
    local PACKAGE_DIR="${BUILD_ROOT}/sources/mongo-cxx-driver"
    clone_or_pull "${PACKAGE_DIR}" "https://github.com/mongodb/mongo-cxx-driver.git" --branch releases/stable --depth 1
    export PKG_CONFIG_PATH="${TARGET_DIR}"/lib/pkgconfig
    cd "${PACKAGE_DIR}/build"
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${TARGET_DIR}" ..
    # -DBSONCXX_POLY_USE_BOOST=1
    # Only for MNMLSTC polyfill (default on Linux and macos
    # make EP_mnmlstc_core
    make -j$NPROC
    make install
    if [ "$(uname)" == "Darwin" ]; then
        cd "${TARGET_DIR}/lib"
        rm -f *.a
        for library in libbsoncxx._noabi.dylib libmongocxx._noabi.dylib; do
            /usr/bin/install_name_tool -id "${TARGET_DIR}/lib/$library" "$library"
        done
        /usr/bin/install_name_tool -change "@rpath/libbsoncxx._noabi.dylib" "${TARGET_DIR}/lib/libbsoncxx._noabi.dylib" "libmongocxx._noabi.dylib"
    fi
}

# ----------------------------------------------------------------------

parse_args()
{
    local OPTIND
    local optchar
    while getopts ":h-:" optchar "$@"; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    source)
                        SOURCE_DIR="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    source=*)
                        SOURCE_DIR=${OPTARG#*=}
                        ;;
                    target)
                        TARGET_DIR="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    target=*)
                        TARGET_DIR=${OPTARG#*=}
                        ;;
                    dev)
                        DEV="yes"
                        TT="T=D"
                        GIT_URI="git@github.com:acorg"
                        ;;
                    acorg-only)
                        ACORG_ONLY="yes"
                        ;;
                    *)
                        if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                            echo "Unknown option --${OPTARG}" >&2
                        fi
                        ;;
                esac
                ;;
            h)
                echo "usage: $0 [--source[=]<dir>] [--target[=]<dir>] [--dev] [--acorg-only]" >&2
                exit 2
                ;;
            *)
                if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                    echo "Non-option argument: '-${OPTARG}'" >&2
                fi
                ;;
        esac
    done
}

# ----------------------------------------------------------------------

build_dir()
{
    if [[ "$USER" == "eu" && -f /r/ramdisk-id ]]; then
        BUILD_ROOT=/r/AD
    else
        BUILD_ROOT="$SOURCE_DIR"
    fi
}

# ----------------------------------------------------------------------

fail()
{
    echo ERROR: "$@" >&2
    exit 2
}

trap fail ERR
parse_args "$@"
main

## ----------------------------------------------------------------------
## Local Variables:
## eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
## End:
