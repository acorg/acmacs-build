# -*- Makefile -*-
# ======================================================================

# $(foreach v, $(.VARIABLES), $(info $(v) = $($(v))))

ifeq ($(filter 4.%,$(MAKE_VERSION)),)
  ifeq ($(R_PACKAGE_DIR),)
    $(error use GNU make 4.x+)
  endif
endif

ifeq ($(ACMACSD_ROOT),)
  $(error undefined env var ACMACSD_ROOT)
endif

ifneq (,$(findstring darwin,$(MAKE_HOST)))
  PLATFORM = darwin
else ifeq (x86_64-pc-linux-gnu,$(MAKE_HOST))
  PLATFORM = linux
else ifeq (,$(MAKE_HOST))
  UNAME = $(shell uname)
  ifeq ($(UNAME),Darwin)
    PLATFORM = darwin
  else ifeq ($(UNAME),Linux)
    PLATFORM = linux
  else
    $(error Unsupported platform $(UNAME))
  endif
else
  $(error Unsupported platform $(MAKE_HOST))
endif

# ----------------------------------------------------------------------

MAKEFLAGS = -w

ifeq ($(MAKECMDGOALS),clean)
  VERBOSE = 1
endif

ifndef VERBOSE
.SILENT:
endif

# ----------------------------------------------------------------------

capable_20 = $(shell if echo "" | $(1) -std=c++20 -x c++ -c -o /dev/null - >/dev/null 2>&1; then echo 1; fi)
capable_2a = $(shell if echo "" | $(1) -std=c++2a -x c++ -c -o /dev/null - >/dev/null 2>&1; then echo 1; fi)
capable_17 = $(shell if echo "" | $(1) -std=c++17 -x c++ -c -o /dev/null - >/dev/null 2>&1; then echo 1; fi)

# ----------------------------------------------------------------------
# clang
# ----------------------------------------------------------------------

ifeq ($(PLATFORM),darwin)
  CLANG_ROOT = /usr/local/opt/llvm
  CLANG = $(CLANG_ROOT)/bin/clang++
  CLANG_LIB_DIR = $(CLANG_ROOT)/lib
  # $(info WARNING: $(MAKE_HOST) $(findstring darwin2,$(MAKE_HOST)))
  # ifneq (,$(findstring darwin2,$(MAKE_HOST)))
  #   ifeq ($(realpath /Library/Developer/CommandLineTools/SDKs/MacOSX$(call sysctl -a | grep kern.osproductversion: | cut -f 1 -d ' ').sdk/usr/include/math.h),)
  #     $(error No SDK in /Library/Developer/CommandLineTools/SDKs/MacOSX$(call sysctl -a | grep kern.osproductversion: | cut -f 1 -d ' ').sdk)
  #   endif
  # else
  #   ifeq ($(realpath /usr/include/math.h),)
  #     $(error please open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.*.pkg to install headers in /usr/include)
  #   endif
  # endif
endif

ifeq ($(call capable_20,$(CLANG)),1)
  CLANG_VERSION = $(shell $(CLANG) --version | grep version | cut -d ' ' -f 3)
  ifeq ($(filter 11.%,$(CLANG_VERSION)),)
	ifeq ($(filter 10.%,$(CLANG_VERSION)),)
      $(info warning: unsupported CLANG version $(CLANG_VERSION))
      undefine CLANG_VERSION
    endif
  endif
  CLANG_LIBS += -L$(CLANG_LIB_DIR)
  # ifneq ($(filter 8.%,$(CLANG_VERSION)),)
  #   CLANG_LIBS += -lc++fs
  # endif
else
  ifeq ($(PLATFORM),darwin)
    $(info WARNING: CLANG not capable_20)
  endif
endif
ifneq ($(CLANG_VERSION),)
  FOUND_COMPILERS += CLANG
else
  CLANG =
endif

ifeq ($(PLATFORM),linux)
  CLANG = clang++
endif

# ----------------------------------------------------------------------
# gcc
# ----------------------------------------------------------------------

GCC10 = g++-10
ifneq ($(GCC10),)
  ifeq ($(call capable_20,$(GCC10)),1)
    GCC10_VERSION = $(shell $(GCC10) -v 2>&1 | tail -n 1 | cut -d ' ' -f 3)
  endif
  ifneq ($(GCC10_VERSION),)
    FOUND_COMPILERS += GCC10
  else
    GCC10 =
  endif
endif

# GCC9 = g++-9
# ifneq ($(GCC9),)
#   ifeq ($(call capable_2a,$(GCC9)),1)
#     # GCC9_VERSION = $(shell $(GCC9) --version | head -n 1 | rev | cut -d ' ' -f 1 | rev)
#     GCC9_VERSION = $(shell $(GCC9) -v 2>&1 | tail -n 1 | cut -d ' ' -f 3)
#   endif
#   ifneq ($(GCC9_VERSION),)
#     FOUND_COMPILERS += GCC9
#   else
#     GCC9 =
#   endif
# endif

# ----------------------------------------------------------------------

ifeq ($(FOUND_COMPILERS),)
  $(error No 2a compilers found)
endif

ifeq ($(PLATFORM),darwin)
  ifeq ($(findstring CLANG,$(FOUND_COMPILERS)),CLANG)
    DEFAULT_COMPILER = CLANG
  else
    DEFAULT_COMPILER = $(word 1,$(FOUND_COMPILERS))
  endif
endif

ifeq ($(PLATFORM),linux)
  ifeq ($(findstring GCC10,$(FOUND_COMPILERS)),GCC10)
    DEFAULT_COMPILER = GCC10
  # else ifeq ($(findstring GCC9,$(FOUND_COMPILERS)),GCC9)
  #   DEFAULT_COMPILER = GCC9
  else	
    DEFAULT_COMPILER = $(word 1,$(FOUND_COMPILERS))
  endif
endif

# ----------------------------------------------------------------------

ifeq ($(DEFAULT_COMPILER),)
  $(error No compiler found)
endif

ifeq ($(C),)
  C = $(DEFAULT_COMPILER)
else ifeq ($(findstring $(C),$(FOUND_COMPILERS)),)
  $(error Not supported compiler $(C), use either of $(FOUND_COMPILERS))
endif

ifeq ($(C),CLANG)
  override CXX = $(CLANG)
  CXX_COMPILER_TYPE = clang
  CXX_NAME = clang++ $(CLANG_VERSION)
  CXX_LIBS = $(CLANG_LIBS) -lomp $(FMT_LIBS)
  # -L/usr/local/lib -lomp
  WARNINGS = -Wno-weak-vtables -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded -Wno-return-std-move-in-c++11
  # -fsized-deallocation required by pybind11 (https://github.com/pybind/pybind11/issues/1604)
  CXX_FEATURES += -fsized-deallocation
  ASAN = -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls -fno-inline-functions -Wno-source-uses-openmp 
# else ifeq ($(C),GCC8)
#   override CXX = $(GCC8)
#   CXX_COMPILER _TYPE= gcc
#   CXX_NAME = g++ $(GCC8_VERSION)
#   CXX_LIBS = -lstdc++fs $(FMT_LIBS)
#   WARNINGS = -Wall -Wextra
#   CXX_FEATURES =
else ifeq ($(C),$(filter $(C), GCC10))
  override CXX = $($(C))
  CXX_COMPILER_TYPE = gcc
  CXX_NAME = g++ $($(C)_VERSION)
  CXX_LIBS = $(FMT_LIBS)
  WARNINGS = -Wall -Wextra
  CXX_FEATURES =
  ASAN = -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls -fno-inline-functions
endif

ifeq ($(DEBUG),1)
  OPT = -O1 $(ASAN)
  CXX_NAME += DEBUG
else
  OPT = -O3 $(MAVX) -mtune=intel -fopenmp
  CXX_NAME += OPT
endif

ifeq ($(TIMER),1)
  ifeq ($(PLATFORM),darwin)
    TIME_CMD = $(shell if gtime true 2>/dev/null; then echo gtime; else echo time; fi)
  else
    TIME_CMD = time
  endif
else
  TIME_CMD =
endif

ifeq ($(CCLS),1)
  ifeq ($(PLATFORM),darwin)
    # https://sarcasm.github.io/notes/dev/compilation-database.html
    COMPILATION_DATABASE = -MJ $@.json
  endif
endif

ifeq ($(PLATFORM),darwin)
  MACOS_10_14_OR_LATER := $(shell test `uname -r | cut -f 1 -d .` -ge 18 && echo true)
  ifeq ($(MACOS_10_14_OR_LATER),true)
    MAVX = -mavx
  else
    $(error macOS older than 10.14 (Mojave) are not supported)
  endif

  # MACOS_10_14 := $(shell test `uname -r | cut -f 1 -d .` -eq 18 && echo true)
  # MACOS_10_15 := $(shell test `uname -r | cut -f 1 -d .` -eq 19 && echo true)
  # MACOS_11 := $(shell test `uname -r | cut -f 1 -d .` -eq 20 && echo true)
  # ifeq ($(MACOS_10_15),true)
  #   MAVX = -mavx
  # 	# MACOSX_VERSION_MIN = -mmacosx-version-min=10.15
  # else ifeq ($(MACOS_10_14),true)
  #   MAVX = -mavx
  # 	# have to use 10.5, otherwise many errors, e.g. filessytem::path is unavailable: introduced in macOS 10.15
  #   MACOSX_VERSION_MIN = -mmacosx-version-min=10.15
  # else
  #   # support old machines without avx
  #   MAVX = -msse4 -mfpmath=sse
  #   # https://stackoverflow.com/questions/52310835/xcode-10-call-to-unavailable-function-stdvisit
  #   CXX_FEATURES += -D_LIBCPP_DISABLE_AVAILABILITY -faligned-allocation
  #   CXX_NAME += MACOS_BEFORE_10_14
  #   MACOSX_VERSION_MIN = -mmacosx-version-min=10.11
  # endif
else ifeq ($(PLATFORM),linux)
  # David B has machine with i7 920 which does not support AVX, so -mavx is replaced with -msse4
  MAVX = -msse4 -mfpmath=sse
endif

PKG_INCLUDES = $(shell pkg-config --cflags liblzma) $(shell pkg-config --cflags zlib)
INCLUDES = -I$(AD_INCLUDE) -Icc -I$(BUILD)/include $(PKG_INCLUDES) $(PYTHON_INCLUDES) $(BOOST_INCLUDES) $(CAIRO_INCLUDES) $(OPENSSL_INCLUDES) $(MONGO_INCLUDES) $(LIBCURL_INCLUDES) $(OPENXLSX_INCLUDES) $(GUILE_INCLUDES) $(INCLUDE_USR_LOCAL)
CXXFLAGS = -g -MMD $(OPT) -fPIC -std=c++2a $(WARNINGS) $(INCLUDES) $(CXX_FEATURES) $(MACOSX_VERSION_MIN) $(COMPILATION_DATABASE)
# CXXFLAGS = -g -MMD $(OPT) -fPIC -std=c++17 $(WARNINGS) $(INCLUDES) $(CXX_FEATURES) $(MACOSX_VERSION_MIN)
LDFLAGS = $(OPT) $(MACOSX_VERSION_MIN)

XZ_LIBS = $$(pkg-config --libs liblzma)
GZ_LIBS = $$(pkg-config --libs zlib)
BZ2_LIBS = -lbz2

ifeq ($(PLATFORM),linux)
  INCLUDE_USR_LOCAL=-I/usr/local/include
else
  INCLUDE_USR_LOCAL=
endif

# ----------------------------------------------------------------------

AD_PACKAGE_NAME = $(notdir $(CURDIR))

AD_ROOT = $(abspath $(ACMACSD_ROOT))
AD_INCLUDE = $(AD_ROOT)/include
AD_LIB = $(AD_ROOT)/lib
AD_SHARE = $(AD_ROOT)/share
AD_DOC = $(AD_SHARE)/doc
AD_CONF = $(AD_SHARE)/conf
AD_TEMPLATES = $(AD_SHARE)/templates
AD_BIN = $(AD_ROOT)/bin
AD_PY = $(AD_ROOT)/py
AD_DATA = $(AD_ROOT)/data
AD_SOURCES = $(AD_ROOT)/sources
AD_BUILD = $(AD_ROOT)/build

BUILD = $(AD_BUILD)/$(AD_PACKAGE_NAME)/build
DIST = $(AD_BUILD)/$(AD_PACKAGE_NAME)/dist

ifeq ($(PLATFORM),linux)
  AD_RPATH = -Wl,-rpath,$(AD_LIB)
endif

# $(1) - source lib
ifeq ($(PLATFORM),darwin)
  define install_lib
    ln -sf $(1) $(AD_LIB)
    /usr/bin/install_name_tool -id $(AD_LIB)/$(notdir $(1)) $(AD_LIB)/$(notdir $(1))
  endef
else ifeq ($(PLATFORM),linux)
  define install_lib
    ln -sf $(1) $(AD_LIB)
    ln -sf $(notdir $(1)) $(AD_LIB)/$(basename $(notdir $(1)))
  endef
endif

# ----------------------------------------------------------------------

# $(1) - package name
define install_headers
  if [ ! -d $(AD_INCLUDE)/$(1) ]; then mkdir $(AD_INCLUDE)/$(1); fi
  $(call symbolic_link_wildcard,$(abspath cc)/*.hh,$(AD_INCLUDE)/$(1))
  $(call symbolic_link_wildcard,$(abspath cc)/*.hpp,$(AD_INCLUDE)/$(1))
endef
#  for f in $(abspath cc)/*.hh; do $(call symbolic_link,$$f,$(AD_INCLUDE)/$(1)); done

# $(1) - source wildcard, $(2) - target
define symbolic_link_wildcard
  for f in $(1); do \
    if [ -f $$f ] || [ -d $$f ]; then \
      if [ -d $(2) ]; then \
        if [ ! -e $(2)/$$(basename $$f) ]; then ln -sfv $$f $(2); fi; \
      else \
        if [ ! -e $(2) ]; then ln -sfv $$f $(2); fi; \
      fi \
    fi \
  done
endef

# $(1) - source, $(2) - target
define symbolic_link
  if [ -d $(1) ]; then \
    if [ -d $(2) ] && [ ! -L $(2) ]; then \
      if [ ! -f $(2)/$$(basename $(1)) ]; then ln -sfv $(1) $(2); fi; \
    else \
      if [ ! -f $(2) ] && [ ! -d $(2) ]; then ln -sfv $(1) $(2); fi; \
    fi; \
  else \
    if [ -d $(2) ]; then \
      if [ ! -f $(2)/$$(basename $(1)) ]; then ln -sfv $(1) $(2); fi; \
    else \
      if [ ! -f $(2) ]; then ln -sfv $(1) $(2); fi; \
    fi \
  fi
endef

# shared_lib_name: $(1) - name, $(2) - major, $(3) - minor
ifeq ($(PLATFORM),darwin)
  # shared_lib_name = $(1).$(2).$(3).dylib
  shared_lib_name = $(1).$(2).dylib
  shared_lib_suffix = .dylib
else ifeq ($(PLATFORM),linux)
  shared_lib_name = $(1).so.$(2)
  shared_lib_suffix = .so
endif

# $(1) - name, $(2) - major, $(3) - minor
ifeq ($(PLATFORM),darwin)
  make_shared_lib = $(CXX) -dynamiclib -current_version $(2).$(3) -compatibility_version $(2).0
else ifeq ($(PLATFORM),linux)
  make_shared_lib = $(CXX) -shared -Wl,-soname,$(1).so.$(2) -Wl,-rpath,'$$ORIGIN'
  # define make_shared
  #   $(CXX) -shared -Wl,-soname,$(1).so.$(2) -Wl,-rpath,'$$ORIGIN'
  # endef
endif

echo_echo = printf "%-16s %s\n"
echo_compile = $(echo_echo) "$(CXX_NAME)" $(1)
echo_shared_lib = $(echo_echo) "SharedLib" $(1)
echo_link_exe = $(echo_echo) "LinkExe" $(1)

# $(1) - target dir, $(2) - git uri, $(3) - branch
define git_clone_or_pull
  if [ -d $(1) ]; then \
    echo Pulling in $(1); \
    cd $(1); git pull -q || exit 1; \
  else \
    echo Cloning to $(1); \
    if [ -n "$(3)" ]; then BRANCH="--branch $(3)"; fi; \
    git clone -q $$BRANCH $(2)/$(notdir $(1)).git $(1); \
  fi
endef

# $(1) - target dir, $(2) - git uri, $(3) - tag
define git_clone_tag
  if [ ! -d $(1) ]; then \
    echo Cloning to $(1) branch $(3); \
    git clone -q --depth 1 --branch $(3) $(2)/$(notdir $(1)).git $(1); \
  fi
endef

# $(1) - dir to make
define make_dir
  if [ ! -d $(1) ]; then \
    if [ ! -e $(1) ]; then \
      echo mkdir $(1); \
      mkdir -p $(1); \
    else \
      echo "make_dir: $(1) exists and it is not a directory" >&2; \
    fi; \
  fi
endef

# ----------------------------------------------------------------------
# python
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_PYTHON),1)
  PYTHON_CONFIG = python3-config
  PYTHON_MODULE_SUFFIX = $(shell $(PYTHON_CONFIG) --extension-suffix)

  PYTHON_INCLUDES = $(shell $(PYTHON_CONFIG) --includes)
  ifeq (,$(shell $(PYTHON_CONFIG) --ldflags | grep -e -lpython))
    # use --embed starting with python 3.8
    PYTHON_LIBS = $(shell $(PYTHON_CONFIG) --ldflags --embed)
  else
    PYTHON_LIBS = $(shell $(PYTHON_CONFIG) --ldflags | sed -E 's/-Wl,-stack_size,[0-9]+//')
  endif
  # $(1) - source lib
  define install_py_lib
    $(call symbolic_link,$(1),$(AD_PY))
  endef
endif

# ----------------------------------------------------------------------
# boost
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_BOOST),1)
  BOOST_VERSION_HPP = $(realpath /usr/include/boost/version.hpp /usr/local/include/boost/version.hpp) # /usr/local/opt/boost@1.60/include/boost/version.hpp)
  ifeq (,$(BOOST_VERSION_HPP))
    ifeq ($(PLATFORM),darwin)
      $(error install boost: brew install boost)
    else
      $(error install boost: apt-get install libboost-dev libboost-date-time-dev)
    endif
  endif
  BOOST_ROOT = $(subst /include/boost/version.hpp,,$(word 1,$(BOOST_VERSION_HPP)))
  # BOOST_INCLUDES = -I$(BOOST_ROOT)/include
  BOOST_LIB_PATH = $(BOOST_ROOT)/lib
  L_BOOST = -L$(BOOST_LIB_PATH)
endif

# ----------------------------------------------------------------------
# cairo
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_CAIRO),1)
  CAIRO_LIBS = $(shell pkg-config --libs cairo)
    ifeq ($(PLATFORM),darwin)
      # homebrew has issues 2019-03-19 https://github.com/Homebrew/homebrew-core/issues/37873
      CAIRO_INCLUDES = $(shell env PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig pkg-config --cflags cairo)
    else
      CAIRO_INCLUDES = $(shell pkg-config --cflags cairo)
    endif
endif

# ----------------------------------------------------------------------
# openssl
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_OPENSSL),1)
  ifeq ($(PLATFORM),darwin)
    OPENSSL_LIBS = -L/usr/local/opt/openssl/lib $(shell env PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig" pkg-config --libs openssl)
    OPENSSL_INCLUDES = -I/usr/local/opt/openssl/include
  else
    OPENSSL_LIBS = $(shell pkg-config --libs openssl)
    OPENSSL_INCLUDES = $(shell pkg-config --cflags openssl)
  endif
endif

# ----------------------------------------------------------------------
# mongo
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_MONGO),1)
  MONGO_LIBS = -L$(AD_LIB) -lmongocxx -lbsoncxx
  MONGO_INCLUDES = -I$(AD_INCLUDE)/mongocxx/v_noabi -I$(AD_INCLUDE)/bsoncxx/v_noabi
endif

# ----------------------------------------------------------------------
# fmt
# ----------------------------------------------------------------------

FMT_LIBS = -L$(AD_LIB) -lfmt

# ----------------------------------------------------------------------
# openxlsx
# ----------------------------------------------------------------------

OPENXLSX_INCLUDES = -I$(AD_INCLUDE)/OpenXLSX
OPENXLSX_LIBS = -L$(AD_LIB) -lOpenXLSX

# ----------------------------------------------------------------------
# xlnt
# ----------------------------------------------------------------------

XLNT_INCLUDES =
XLNT_LIBS = -L$(AD_LIB) -lxlnt

# ----------------------------------------------------------------------
# libcurl
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_LIBCURL),1)
  ifneq ($(shell if pkg-config libcurl; then echo 1; fi),1)
    $(error Please install libcurl (apt-get install libcurl4-openssl-dev))
  endif
  LIBCURL_LIBS = $(shell pkg-config --libs libcurl)
  LIBCURL_INCLUDES = $(shell pkg-config --cflags libcurl)
endif

# ----------------------------------------------------------------------
# guile
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_GUILE),1)
  GUILE_LIBS = $(shell guile-config link)
  GUILE_INCLUDES = $(shell guile-config compile)
endif

# ----------------------------------------------------------------------
# sass
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_SASS),1)
  SASSC = sassc
  ifeq ($(shell if $(SASSC) -v >/dev/null 2>&1; then echo 1; fi),)
    $(error Please install SASSC)
  endif

  # $(1) - target
  # $(2) - source
  define sass
    echo "SASS       " $(notdir $@)
    $(SASSC) --style compressed -I sass $(abspath $<) $(basename $@)
    gzip -9f $(basename $@)
  endef
endif

# ----------------------------------------------------------------------
# rtags
# ----------------------------------------------------------------------

ifeq ($(NO_RTAGS_TARGET),)
  ifndef RTAGS_TARGET
    RTAGS_TARGET = all
  endif

rtags:
	$(MAKE) -nkB $(RTAGS_TARGET) | grep -e -MMD | /usr/local/bin/rc --compile -
endif

# ----------------------------------------------------------------------
# armadillo http://arma.sourceforge.net
# ----------------------------------------------------------------------

ifeq ($(CONFIGURE_ARMADILLO),1)
  ifeq ($(PLATFORM),darwin)
    ifneq ($(shell if pkg-config armadillo; then echo 1; fi),1)
      $(error Please install armadillo (brew install armadillo))
    endif
    LIBARMADILLO_LIBS = $$(pkg-config --libs armadillo) -framework Accelerate
    LIBARMADILLO_INCLUDES = $$(pkg-config --cflags arpack armadillo)
  else
    ARAMDILLO_H = $(realpath /usr/include/armadillo)
    ifeq (,$(ARAMDILLO_H))
      $(error Please install armadillo (apt install libarmadillo-dev))
    endif
	LIBARMADILLO_LIBS = -larmadillo -lblas
    LIBARMADILLO_INCLUDES = 
  endif
endif

# ----------------------------------------------------------------------

-include $(BUILD)/*.d

# ----------------------------------------------------------------------
# rules
# ----------------------------------------------------------------------

# abspath below is to show full file path by __FILE__ macro used in logging
$(BUILD)/%.o: cc/%.cc | $(BUILD) install-headers
	$(call echo_compile,$<)
ifeq ($(ECHO_COMPILATION_COMMAND),1)
	echo $(CXX) $(CXXFLAGS) -c -o $@ $(abspath $<)
endif
	$(TIME_CMD) $(CXX) $(CXXFLAGS) -c -o $@ $(abspath $<)

install-headers:
	$(call install_headers,$(AD_PACKAGE_NAME))

make-installation-dirs: $(AD_INCLUDE) $(AD_LIB) $(AD_SHARE) $(AD_CONF) $(AD_TEMPLATES) $(AD_DOC) $(AD_BIN) $(AD_PY) $(AD_DATA)
.PHONY: make-installation-dirs

$(AD_BIN) $(AD_INCLUDE) $(AD_LIB) $(AD_PY) $(AD_SHARE):
	mkdir -p $(AD_BUILD)/$(@F) && if [ ! -L $@ ]; then rm -f $@; ln -sv $(AD_BUILD)/$(@F) $@; fi

$(AD_BUILD) $(AD_CONF) $(AD_TEMPLATES) $(AD_DOC) $(AD_DATA): $(AD_SHARE)
	$(call make_dir,$@)

ifeq ($(NO_CLEAN_TARGET),)
clean:
	rm -rf $(DIST) $(BUILD)
endif

$(DIST): $(AD_BUILD)
	mkdir -pv $@
	$(call symbolic_link,$@,dist)

$(BUILD): $(AD_BUILD)
	mkdir -pv $@
	$(call symbolic_link,$@,build)

# avoid deleting intermediate files
.SECONDARY:

# ----------------------------------------------------------------------

help-vars:
	printf "\nVariables:\n"
	printf "\tVERBOSE=1 - echo commands being executed\n"
	printf "\tDEBUG=1 - disable optimisation and omp\n"
	printf "\tC=CLANG or C=GCC10 - compiler to use\n"
	printf "\n"

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
