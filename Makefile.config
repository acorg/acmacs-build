# -*- Makefile -*-
# ======================================================================

# $(foreach v, $(.VARIABLES), $(info $(v) = $($(v))))

ifeq ($(ACMACSD_ROOT),)
  $(error undefined env var ACMACSD_ROOT)
endif

ifneq (,$(findstring darwin,$(MAKE_HOST)))
  PLATFORM=darwin
else ifeq (x86_64-pc-linux-gnu,$(MAKE_HOST))
  PLATFORM=linux
else
  $(error Unsupported platform $(MAKE_HOST))
endif

# ----------------------------------------------------------------------

ifndef VERBOSE
.SILENT:
endif

# ----------------------------------------------------------------------

capable_2a = $(shell if echo "" | $(1) -std=c++2a -x c++ -c -o /dev/null - ; then echo 1; fi)

# ----------------------------------------------------------------------
# clang
# ----------------------------------------------------------------------

ifeq ($(PLATFORM),darwin)
  CLANG_ROOT = /usr/local/opt/llvm
  CLANG = $(CLANG_ROOT)/bin/clang++
endif

ifeq ($(PLATFORM),linux)
endif

ifeq ($(call capable_2a,$(CLANG)),1)
  CLANG_VERSION = $(shell $(CLANG) --version | grep version | cut -d ' ' -f 3)
  ifeq ($(filter 7.%,$(CLANG_VERSION)),)
    $(info Warinig: unsupported CLANG version $(CLANG_VERSION))
    undefine CLANG_VERSION
  endif
endif
ifneq ($(CLANG_VERSION),)
  FOUND_COMPILERS += CLANG
else
  undefine CLANG
endif

# ----------------------------------------------------------------------
# gcc
# ----------------------------------------------------------------------

GCC8 = g++-8
ifeq ($(call capable_2a,$(GCC8)),1)
  GCC8_VERSION = $(shell $(GCC8) --version | head -n 1 | rev | cut -d ' ' -f 1 | rev)
endif
ifneq ($(GCC8_VERSION),)
  FOUND_COMPILERS += GCC8
else
  undefine GCC8
endif

# ----------------------------------------------------------------------

ifeq ($(FOUND_COMPILERS),)
  $(error No 2a compilers found)
endif

ifeq ($(PLATFORM),darwin)
  ifeq ($(findstring CLANG,$(FOUND_COMPILERS)),CLANG)
    DEFAULT_COMPILER = CLANG
  else
    DEFAULT_COMPILER = $(word 1,$(FOUND_COMPILERS))
  endif
endif

ifeq ($(PLATFORM),linux)
  ifeq ($(findstring GCC8,$(FOUND_COMPILERS)),GCC8)
    DEFAULT_COMPILER = GCC8
  else
    DEFAULT_COMPILER = $(word 1,$(FOUND_COMPILERS))
  endif
endif

# ----------------------------------------------------------------------

ifeq ($(DEFAULT_COMPILER),)
  $(error No compiler found)
endif

ifeq ($(C),)
  CC = $(DEFAULT_COMPILER)
else ifeq ($(findstring $(C),$(FOUND_COMPILERS)),)
  $(error Not supported compiler $(C), use either of $(FOUND_COMPILERS))
endif

ifeq ($(CC),CLANG)
  CXX = $(CLANG)
  CXX_NAME = clang++ $(CLANG_VERSION)
  # CXX_LIB = -L$(CXX_ROOT)/lib -lc++fs -lomp -lc++
  CXX_LIB = -lc++fs -lomp
  WARNINGS = -Wno-weak-vtables -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded
else ifeq ($(CC),GCC8)
  CXX = $(GCC8)
  CXX_NAME = g++ $(GCC8_VERSION)
  CXX_LIB = -lstdc++fs
  WARNINGS = -Wall -Wextra
endif

ifeq ($(DEBUG),1)
  OPT = -O0 -fno-inline-functions -Wno-source-uses-openmp
  CXX_NAME += DEBUG
else
  OPT = -O3 -mavx -mtune=intel -fopenmp
  CXX_NAME += OPT
endif

CXXFLAGS = -g -MMD $(OPT) -fPIC -std=c++2a $(WARNINGS) -I$(AD_INCLUDE)
LDFLAGS = $(OPT)

# ----------------------------------------------------------------------

PROJECT_NAME = $(notdir $(CURDIR))

AD_INCLUDE = $(ACMACSD_ROOT)/include
AD_LIB = $(ACMACSD_ROOT)/lib
AD_SHARE = $(ACMACSD_ROOT)/share
AD_BIN = $(ACMACSD_ROOT)/bin
AD_PY = $(ACMACSD_ROOT)/py
AD_DATA = $(ACMACSD_ROOT)/data
AD_SOURCES = $(ACMACSD_ROOT)/sources

BUILD = $(abspath build)
DIST = $(abspath dist)

ifeq ($(PLATFORM),linux)
  AD_RPATH = -Wl,-rpath,$(AD_LIB)
endif

# $(1) - source lib
ifeq ($(PLATFORM),darwin)
  define install_lib
    ln -sf $(1) $(AD_LIB)
    /usr/bin/install_name_tool -id $(AD_LIB)/$(notdir $(1)) $(AD_LIB)/$(notdir $(1))
  endef
else ifeq ($(PLATFORM),linux)
  define install_lib
    ln -sf $(1) $(AD_LIB)
    ln -sf $(notdir $(1)) $(AD_LIB)/$(basename $(notdir $(1)))
  endef
endif

# ----------------------------------------------------------------------

# $(1) - package name
define install_headers
	if [ ! -d $(AD_INCLUDE)/$(1) ]; then mkdir $(AD_INCLUDE)/$(1); fi
	ln -sf $(abspath cc)/*.hh $(AD_INCLUDE)/$(1)
endef

# $(1) - name, $(2) - major, $(3) - minor
# shared_lib_name = $(1).$(2).$(3).dylib
shared_lib_name = $(1).$(2).dylib

# $(1) - name, $(2) - major, $(3) - minor
make_shared = $(CXX) -dynamiclib -current_version $(2).$(3) -compatibility_version $(2).0

# ----------------------------------------------------------------------
# python
# ----------------------------------------------------------------------

define configure_python

  PYTHON_CONFIG = python3-config
  PYTHON_MODULE_SUFFIX = $(shell $(PYTHON_CONFIG) --extension-suffix)

  PYTHON_LDLIBS = $(shell $(PYTHON_CONFIG) --ldflags | sed -E 's/-Wl,-stack_size,[0-9]+//')
  PYTHON_INCLUDES = $(shell $(PYTHON_CONFIG) --includes)

  # $(1) - source lib
  define install_py_lib
    ln -sf $(1) $(AD_PY)
  endef

endef

# ----------------------------------------------------------------------
# sass
# ----------------------------------------------------------------------

define configure_sass

  SASSC = sassc
  ifeq ($(shell if $(SASSC) -v >/dev/null 2>&1; then echo 1; fi),)
    $(error Please install SASSC)
  endif

  # $(1) - target
  # $(2) - source
  define sass
    echo "SASS       " $(notdir $@)
    $(SASSC) --style compressed -I sass $(abspath $<) $(basename $@)
    gzip -9f $(basename $@)
  endef

endef

# ----------------------------------------------------------------------
# rtags
# ----------------------------------------------------------------------

ifndef RTAGS_TARGET
RTAGS_TARGET = all
endif

rtags:
	make -nkB $(RTAGS_TARGET) | /usr/local/bin/rc --compile - || true

# ----------------------------------------------------------------------
# rules
# ----------------------------------------------------------------------

# abspath below is to show full file path by __FILE__ macro used in logging
$(BUILD)/%.o: cc/%.cc | $(BUILD) install-headers
	echo $(CXX_NAME) $<
	$(CXX) $(CXXFLAGS) -c -o $@ $(abspath $<)

install-headers:
	$(call install_headers,$(PROJECT_NAME))

clean:
	rm -rf $(DIST)/* $(BUILD)

$(DIST):
	mkdir -p $(DIST)

$(BUILD):
	mkdir -p $(BUILD)

# avoid deleting intermediate files
.SECONDARY:

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
