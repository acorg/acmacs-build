#! /bin/bash

# ----------------------------------------------------------------------

main()
{
    trap fail ERR
    if [[ ! -d "${MAKEFILES_DEST}" ]]; then
        mkdir -p "${MAKEFILES_DEST}"
    fi
    makefile_gxx
    makefiles
}

# ----------------------------------------------------------------------

find_gcc_Darwin()
{
    trap fail ERR
    if [[ "$(/usr/local/opt/llvm/bin/clang++ --version | grep version | cut -d ' ' -f 3)" > "5.0" ]]; then
        echo llvm 5.0+
        CXX_TYPE=clang
        CXX_NAME=$(printf "%-16s" "clang++-$(/usr/local/opt/llvm/bin/clang++ --version | grep version | cut -d ' ' -f 3)")
        CXX_ROOT="/usr/local/opt/llvm"
        CXXFLAGS="${CXXFLAGS}"
        LDFLAGS="${LDFLAGS}"
    else
        fail "llvm 5.0+ required on macOS, use \"brew install llvm\" to install it"
    fi
}

# ----------------------------------------------------------------------

find_gcc_Linux()
{
    trap fail ERR
    if [[ "$(g++-7 --version | head -n 1 | cut -d ' ' -f 3 | cut -d - -f 1)" > "7.2" ]]; then
        echo gcc 7.2
        CXX_TYPE=gcc
        CXX_NAME=$(printf "%-16s" "g++-$(g++-7 --version | head -n 1 | cut -d ' ' -f 3 | cut -d - -f 1)")
        CXX_ROOT="$(dirname $(dirname $(which g++-7)))"
        CXXFLAGS="${CXXFLAGS}"
        LDFLAGS="${LDFLAGS}"
    else
        fail "g++ 7.2+ required on Linux"
    fi
}

# ----------------------------------------------------------------------

makefile_gxx()
{
    trap fail ERR
    CXXFLAGS="-g -MMD \$(OPTIMIZATION) \$(PROFILE) -fPIC -std=\$(STD) \$(WARNINGS) -I\$(AD_INCLUDE)"
    LDFLAGS="\$(OPTIMIZATION) \$(PROFILE)"
    find_gcc_$(uname)
    local DEST="${MAKEFILES_DEST}/Makefile.g++"
    if [[ ! -f "${DEST}" ]]; then
        echo "Creating ${DEST}"
        cp "${MAKEFILES_SRC}/Makefile.g++.$(uname).${CXX_TYPE}.in" "${DEST}"
        printf '\nCXX_TYPE = %s\nCXX_NAME = "%s"\nCXX_ROOT = %s\nCXXFLAGS = %s\nLDFLAGS = %s\n' "${CXX_TYPE}" "${CXX_NAME}" "${CXX_ROOT}" "${CXXFLAGS}" "${LDFLAGS}" >>"${DEST}"
    fi
}

# ----------------------------------------------------------------------

makefiles()
{
    trap fail ERR
    local DEST="${MAKEFILES_DEST}/Makefile.dist-build.vars"
    if [[ ! -f "${DEST}" ]]; then
        echo "Creating ${DEST}"
        cp "${MAKEFILES_SRC}/Makefile.dist-build.vars.in" "${DEST}"
        if [ -f "${MAKEFILES_SRC}/Makefile.dist-build.vars.$(uname).in" ]; then
            cat "${MAKEFILES_SRC}/Makefile.dist-build.vars.$(uname).in" >> "${DEST}"
        fi
        printf "\nPROJECT_BUILD_ROOT = ${BUILD_ROOT}/build/\$(PROJECT_NAME)" >>"${DEST}"
    fi
    for nn in dist-build.rules python rtags cheerp sass; do
        DEST="${MAKEFILES_DEST}/Makefile.${nn}"
        if [[ ! -f "${DEST}" ]]; then
            cp "${MAKEFILES_SRC}/Makefile.${nn}.in" "${DEST}"
            if [ -f "${MAKEFILES_SRC}/Makefile.${nn}.$(uname).in" ]; then
                cat "${MAKEFILES_SRC}/Makefile.${nn}.$(uname).in" >> "${DEST}"
            fi
        fi
    done
}

# ----------------------------------------------------------------------

fail()
{
    printf "ERROR: " >&2
    printf "$@\n" >&2
    exit 2
}

trap fail ERR
if [ $# -ne 3 ]; then
    fail "Usage $0 <MAKEFILES_SRC> <MAKEFILES_DEST> <BUILD_ROOT>\n       $(basename $0) ${ACMACSD_ROOT}/sources/acmacs-build/makefiles /r/AD/share/makefiles /r/AD/build"
fi
MAKEFILES_SRC="$1"
MAKEFILES_DEST="$2"
BUILD_ROOT="$3"
main

## ----------------------------------------------------------------------
## Local Variables:
## eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
## End:
